import{zodToJsonSchema as h}from"zod-to-json-schema";function x(e){let i=async r=>Promise.resolve(e.execute(r));return{name:e.name,description:e.description,parameters:e.parameters,execute:i}}function A(e){let i=(e.baseURL??"https://api-inference.modelscope.cn/v1").replace(/\/$/,""),r=e.apiKey;if(!r)throw new Error("apiKey is required");let t=o=>({provider:"openai",endpoint:`${i}/chat/completions`,model:o,apiKey:r});return t.baseURL=i,t.apiKey=r,t.chat=o=>t(o),t}async function C(e){let{messages:i,onToolCall:r}=e,t=[...i],o=new Map,c=e.tools;if(Array.isArray(c))for(let n of c)o.set(n.name,n);else if(c&&typeof c=="object")for(let[n,l]of Object.entries(c))o.set(n,l);let m=o.size?Array.from(o.values()).map(n=>({type:"function",function:{name:n.name,description:n.description,parameters:h(n.parameters)}})):void 0,y=`${("client"in e?e.client.baseURL:e.model.endpoint.replace(/\/chat\/completions$/,"")).replace(/\/$/,"")}/chat/completions`,g="client"in e?e.client.apiKey:e.model.apiKey,f="client"in e?e.model:e.model.model;for(;;){let l=(await fetch(y,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${g}`},body:JSON.stringify({model:f,messages:t,tools:m})}).then(s=>s.json())).choices?.[0]?.message;if(!l)throw new Error("No message returned");t.push(l);let p=l.tool_calls;if(!p||p.length===0)return{text:l.content};r&&p.map(a=>a.function.name).forEach(a=>r(a));for(let s of p){let a=o.get(s.function.name);if(!a)throw new Error(`Tool ${s.function.name} not found`);let T=a.parameters.parse(JSON.parse(s.function.arguments)),u=await a.execute(T);t.push({role:"tool",content:u,tool_call_id:s.id})}}}function d(){return typeof window<"u"&&typeof document<"u"?"browser":"node"}function R(e="world"){return`Hello, ${e}! from ${d()}`}var M={detectEnvironment:d,hello:R};export{A as createOpenAI,x as createTool,M as default,d as detectEnvironment,C as generateText,R as hello};
//# sourceMappingURL=index.js.map