import{zodToJsonSchema as T}from"zod-to-json-schema";function C(e){let p=(e.baseURL??"https://api-inference.modelscope.cn/v1").replace(/\/$/,""),a=e.apiKey;if(!a)throw new Error("apiKey is required");let t=o=>({provider:"openai",endpoint:`${p}/chat/completions`,model:o,apiKey:a});return t.baseURL=p,t.apiKey=a,t.chat=o=>t(o),t}async function A(e){let{messages:p,onToolCall:a}=e,t=[...p],o=new Map,l=e.tools;if(Array.isArray(l))for(let n of l)o.set(n.name,n);else if(l&&typeof l=="object")for(let[n,i]of Object.entries(l))o.set(n,i);let m=o.size?Array.from(o.values()).map(n=>({type:"function",function:{name:n.name,description:n.description,parameters:T(n.parameters)}})):void 0,y=`${("client"in e?e.client.baseURL:e.model.endpoint.replace(/\/chat\/completions$/,"")).replace(/\/$/,"")}/chat/completions`,g="client"in e?e.client.apiKey:e.model.apiKey,f="client"in e?e.model:e.model.model;for(;;){let i=(await fetch(y,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${g}`},body:JSON.stringify({model:f,messages:t,tools:m})}).then(s=>s.json())).choices?.[0]?.message;if(!i)throw new Error("No message returned");t.push(i);let c=i.tool_calls;if(!c||c.length===0)return{text:i.content};a&&c.map(r=>r.function.name).forEach(r=>a(r));for(let s of c){let r=o.get(s.function.name);if(!r)throw new Error(`Tool ${s.function.name} not found`);let h=r.parameters.parse(JSON.parse(s.function.arguments)),u=await r.execute(h);t.push({role:"tool",content:u,tool_call_id:s.id})}}}function d(){return typeof window<"u"&&typeof document<"u"?"browser":"node"}function x(e="world"){return`Hello, ${e}! from ${d()}`}var M={detectEnvironment:d,hello:x};export{C as createOpenAI,M as default,d as detectEnvironment,A as generateText,x as hello};
//# sourceMappingURL=index.js.map