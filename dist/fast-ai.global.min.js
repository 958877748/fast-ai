var FastAI=function(e,t){"use strict";function o(){return"undefined"!=typeof window&&"undefined"!=typeof document?"browser":"node"}function n(e="world"){return`Hello, ${e}! from ${o()}`}var r={detectEnvironment:o,hello:n};return e.createOpenAI=function(e){const t=(e.baseURL??"https://api-inference.modelscope.cn/v1").replace(/\/$/,""),o=e.apiKey;if(!o)throw new Error("apiKey is required");const n=e=>({provider:"openai",endpoint:`${t}/chat/completions`,model:e,apiKey:o});return n.baseURL=t,n.apiKey=o,n.chat=e=>n(e),n},e.createTool=function(e){return{name:e.name,description:e.description,parameters:e.parameters,execute:async t=>Promise.resolve(e.execute(t))}},e.default=r,e.detectEnvironment=o,e.generateObject=async function(e){const o=e.schema,n=`${("client"in e?e.client.baseURL:e.model.endpoint.replace(/\/(?:chat\/completions)?$/,"")).replace(/\/$/,"")}/chat/completions`,r="client"in e?e.client.apiKey:e.model.apiKey,c="client"in e?e.model:e.model.model,a=[{role:"system",content:e.system??"You are a structured-output assistant. Always respond by calling the tool `submit_object` exactly once with the final JSON object. Do not include any other text."},{role:"user",content:e.prompt}],s=[{type:"function",function:{name:"submit_object",description:"Submit the final structured object that matches the required schema.",parameters:t.zodToJsonSchema(o)}}],i=await fetch(n,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`},body:JSON.stringify({model:c,messages:a,tools:s})}).then(e=>e.json()),l=i.choices?.[0]?.message;if(!l)throw new Error("No message returned");const m=(l.tool_calls??[]).find(e=>"submit_object"===e.function?.name);if(m){const e=m.function.arguments||"{}",t=JSON.parse(e);return{object:o.parse(t)}}if(l.content)try{const e=JSON.parse(l.content);return{object:o.parse(e)}}catch(e){}throw new Error("Model did not return a structured object. Ensure the model supports tool calling.")},e.generateText=async function(e){const{messages:o,onToolCall:n}=e,r=[...o],c=new Map,a=e.tools;if(Array.isArray(a))for(const e of a)c.set(e.name,e);else if(a&&"object"==typeof a)for(const[e,t]of Object.entries(a))c.set(e,t);const s=c.size?Array.from(c.values()).map(e=>({type:"function",function:{name:e.name,description:e.description,parameters:t.zodToJsonSchema(e.parameters)}})):void 0,i=`${("client"in e?e.client.baseURL:e.model.endpoint.replace(/\/chat\/completions$/,"")).replace(/\/$/,"")}/chat/completions`,l="client"in e?e.client.apiKey:e.model.apiKey,m="client"in e?e.model:e.model.model;for(;;){const e=await fetch(i,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${l}`},body:JSON.stringify({model:m,messages:r,tools:s})}).then(e=>e.json()),t=e.choices?.[0]?.message;if(!t)throw new Error("No message returned");r.push(t);const o=t.tool_calls;if(!o||0===o.length)return{text:t.content};if(n){o.map(e=>e.function.name).forEach(e=>n(e))}for(const e of o){const t=c.get(e.function.name);if(!t)throw new Error(`Tool ${e.function.name} not found`);const o=t.parameters.parse(JSON.parse(e.function.arguments)),n=await t.execute(o);r.push({role:"tool",content:n,tool_call_id:e.id})}}},e.hello=n,Object.defineProperty(e,"__esModule",{value:!0}),e}({},zodToJsonSchema);
//# sourceMappingURL=fast-ai.global.min.js.map
